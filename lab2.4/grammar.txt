
function_definition -> type_specifier declarator compound_statement
translation_unit -> function_definition*

declaration -> type_specifier init_declarator (',' init_declarator)* ';'
init_declarator -> declarator ('=' initializer)?
type_specifier -> 'int' | 'double'

declarator -> pointer? direct_declarator
direct_declarator -> IDENT 
                   | direct_declarator '[' constant_expression? ']' 
                   | direct_declarator '(' parameter_type_list ')'
pointer -> '*'
parameter_type_list -> parameter_declaration (',' parameter_declaration)*
parameter_declaration -> type_specifier declarator

statement -> compound_statement 
           | for_statement 
           | while_statement 
           | return_statement 
           | expression_statement

compound_statement -> '{' (declaration | statement)* '}'

for_statement -> 'for' '(' (declaration | expression)? ';' expression? ';' expression? ')' statement
while_statement -> 'while' '(' expression ')' statement
return_statement -> 'return' expression? ';'
expression_statement -> expression ';'

# Expressions
expression -> assignment_expression
assignment_expression -> conditional_expression 
                       | conditional_expression assignment_operator assignment_expression
assignment_operator -> '=' | '+=' | '*='

conditional_expression -> equality_expression 
                        | equality_expression '?' expression ':' conditional_expression

equality_expression -> relational_expression 
                     | equality_expression '==' relational_expression

relational_expression -> additive_expression 
                       | relational_expression '<' additive_expression

additive_expression -> multiplicative_expression 
                     | additive_expression ('+' | '-') multiplicative_expression

multiplicative_expression -> unary_expression 
                           | multiplicative_expression '*' unary_expression

unary_expression -> postfix_expression 
                  | ('++' | '*' | '+' | '-') unary_expression

postfix_expression -> primary_expression 
                    | postfix_expression '[' expression ']' 
                    | postfix_expression '(' argument_expression_list? ')' 
                    | postfix_expression '++'

primary_expression -> IDENT 
                    | I_CONSTANT 
                    | F_CONSTANT 
                    | '(' expression ')'

IDENT -> [a-zA-Z_][a-zA-Z0-9_]*
I_CONSTANT -> [0-9]+
F_CONSTANT -> [0-9]+.[0-9]*