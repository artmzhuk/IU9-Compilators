INTEGER = [0-9]+
LONG = [0-9]+
FLOAT = [0-9]+(.[0-9]*)?(e[-+]?[0-9]+)?
DOUBLE = [0-9]+(.[0-9]*)?(e[-+]?[0-9]+)?
STRING = (".*")
VARNAME = ([A-Za-z][A-Za-z0-9]*)

Program ->  Functions

Functions -> Function*

Function -> FUNCTION VarDef ( FunctionParams ) Statements END FUNCTION
	  | SUB VARNAME ( FunctionParams ) Statements END SUB

FunctionParams -> FunctionParams , FunctionParam
		| FunctionParam
		| ε

FunctionParam -> VarDef
FunctionParam -> VarDef ()

VarDef -> VARNAME Type
Type -> % | & | ! | # | $ | eps
	
Последовательность операторов:
Statements -> Statement*

Оператор — присваивание, условие, условие с ветвлением, цикл, цикл со счётчиком, оператор DIM:
Statement -> AssignStatement
	   | IfStatement
	   | IfElseStatement
	   | WhileStatement
	   | ForStatement
	   | DimStatement
	   
	  
Оператор присваивания:
AssignStatement -> Factor = Expr

Условный оператор:
IfStatement -> IF Expr THEN Statements END IF
IfElseStatement -> IF Expr THEN Statements ELSE Statements END IF

Цикл (цикл с предусловием, цикл с предусловием с отрицанием, цикл с постусловием, цикл с постусловием с отрицанием, бесконечный цикл):
WhileStatement -> DO WHILE Expr Statements LOOP
		| DO UNTIL Expr Statements LOOP
		| DO Statements LOOP WHILE Expr
		| DO Statements LOOP UNTIL Expr
		| DO Statements LOOP
		
Цикл со счётчиком:
ForStatement -> FOR VarDef = Expr TO Expr Statements NEXT VarDef

Оператор DIM;
DimStatement - > DIM DimArrayDecl
DimArrayDecl -> VarDef "(" Expr ")"  # Размер массива - выражение: coefs!(4)


Выражение — переменная, константа, двуместная операция, одноместная операция, вызов функции, элемент массива:
Expr -> ArithmExpr
      | ArithmExpr > ArithmExpr
      | ArithmExpr < ArithmExpr
      | ArithmExpr >= ArithmExpr
      | ArithmExpr <= ArithmExpr
      | ArithmExpr == ArithmExpr
      | ArithmExpr <> ArithmExpr
      
ArithmExpr -> Term
	    | + Term
	    | - Term
	    | ArithmExpr + Term
	    | ArithmExpr - Term
	    | ArithmExpr OR Term
	    
Term -> Factor
      | Term * Factor
      | Term / Factor
      | Term AND Factor


Factor -> NOT Factor
       | VarDef ( FunctionParams )
       | VARNAME ( FunctionParams )
       | VarDef [ Expr ]
       | VarDef (Expr)
	   | VarDef (VarDef)
       | Const
       | ( Expr )

Const -> INT_CONST | LONG_CONST | FLOAT_CONST | DOUBLE_CONST | STRING_CONST